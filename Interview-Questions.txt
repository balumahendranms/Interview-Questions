JavaScript Interview Questions
--------------------------------
1.Difference between setTimeout and setInterval
  setTimeout Fires only once
  setInterval Fires again and again
  
2.Javascript cookie

3.Difference between == and === in javascript
4.call apply and bind in javascript
5.localstorage in html5
6.How to create object in javascript
7.What is closure?
8.What is hoisting in javascript
9.what is use strict mode in javascript
10.'this' is javascript
11.How javascript is differe from other scripting language
12.merge the two object
13.difference between null and undefined
14.data types in javascript
15.How to find a operation system using javascript
16.difference between document.ready and onload
17.event bubbling
18.event capturing
19.how to stop the event
20.prototype in javascript
21.callback function in javascript
22.var,let.const in javascrpt
Advanced JavaScript Questions
-----------------------------------------------------------------------------------------
Hoisting
--------------------
1.Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).
2.In JavaScript, a variable can be declared after it has been used
3.In other words; a variable can be used before it has been declared.
Declare Your Variables At the Top !
Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript.
If a developer doesn't understand hoisting, programs may contain bugs (errors).
To avoid bugs, always declare all variables at the beginning of every scope.
Since this is how JavaScript interprets the code, it is always a good rule.
____________________________________________________________________________________________
Strict Mode in javascript
---------------------------
Why Strict Mode?

Strict mode makes it easier to write "secure" JavaScript.

Strict mode changes previously accepted "bad syntax" into real errors.

As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.

In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.

In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.
______________________________________________________________________________________________
JavaScript Object 
In JavaScript we can create javascript object in three ways:-

1.object literal
2.using new keyword
3.using constructor 
***************************************************************************************************************************************

 
Angular JS Questions 
----------------------
1.What is component - Angular 2
2.What is directive - Angular 2
3.What is template - Angular 2
4.How to create a component in Angualr js -Angular 2
5.How many types of directives in angular js - Angular 2
   a.component directive
   b.structural directive
   c.attribute directive
6.How you pass the data from one controller to other controller - Angular 1.x
7.How you will pass the data from one component to other component
8.how to create new component using CLI
9.What is JIT
10.What is AOT
11.Digest cycle in angular JS
-----------------------------
Angular js has something called two way binding , .i.e whatever changes you make on view are reflected in controller through viewmodel($scope) or vice versa and the way it is implemented internally is using dirty checking or digest . So once you create a variable on $scope and do a watch on it (either explicitly creating a watcher or through using directives like ng-model etc) your are telling angular to watch for changes on it. internally angular keeps a copy of all the variables it is watching . So whenever you make a change on those variable either on view or in js, angular compares it with the old copy to make sure if it has changed or not in digest cycle (or a cycle in which dirty checking is done) .if it has changed it will update it with the new one so that single value is available in both view and controller. But imagine if variable value changes within its watch function every time, it will go on updating it making the watch function go into an infinite loop , to avoid this if the variable value is inconsistent in digest cycles angular will throws error like “variables has exceeded 10 iterations in digest ” to avoid infinite loop.

12. Lifecycle hooks in angular js
------------------------------
ngOnChanges()
ngOnInit()
ngDoCheck()
ngAfterContentInit()
ngAfterContentChecked()
ngAfterViewInit()
ngAfterViewChecked()
ngOnDestroy()
---------------------------------

